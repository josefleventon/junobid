/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Addr, InstantiateMsg, ExecuteMsg, Timestamp, Uint64, Uint128, BiddingPeriod, QueryMsg, BidResponse, Bid, BiddingPeriodResponse, BidsResponse } from "./Bid.types";
import { BidQueryClient, BidClient } from "./Bid.client";
export const bidQueryKeys = {
  contract: ([{
    contract: "bid"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...bidQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  biddingPeriod: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...bidQueryKeys.address(contractAddress)[0],
    method: "bidding_period",
    args
  }] as const),
  bids: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...bidQueryKeys.address(contractAddress)[0],
    method: "bids",
    args
  }] as const),
  bid: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...bidQueryKeys.address(contractAddress)[0],
    method: "bid",
    args
  }] as const)
};
export interface BidReactQuery<TResponse, TData = TResponse> {
  client: BidQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface BidBidQuery<TData> extends BidReactQuery<BidResponse, TData> {
  args: {
    address: Addr;
  };
}
export function useBidBidQuery<TData = BidResponse>({
  client,
  args,
  options
}: BidBidQuery<TData>) {
  return useQuery<BidResponse, Error, TData>(bidQueryKeys.bid(client?.contractAddress, args), () => client ? client.bid({
    address: args.address
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface BidBidsQuery<TData> extends BidReactQuery<BidsResponse, TData> {}
export function useBidBidsQuery<TData = BidsResponse>({
  client,
  options
}: BidBidsQuery<TData>) {
  return useQuery<BidsResponse, Error, TData>(bidQueryKeys.bids(client?.contractAddress), () => client ? client.bids() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface BidBiddingPeriodQuery<TData> extends BidReactQuery<BiddingPeriodResponse, TData> {}
export function useBidBiddingPeriodQuery<TData = BiddingPeriodResponse>({
  client,
  options
}: BidBiddingPeriodQuery<TData>) {
  return useQuery<BiddingPeriodResponse, Error, TData>(bidQueryKeys.biddingPeriod(client?.contractAddress), () => client ? client.biddingPeriod() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface BidBidMutation {
  client: BidClient;
  msg: {
    address?: Addr;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useBidBidMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, BidBidMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, BidBidMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.bid(msg, fee, memo, funds), options);
}
export interface BidEndBiddingMutation {
  client: BidClient;
  msg: {
    acceptedBids: Addr[];
    withdrawalAddress?: Addr;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useBidEndBiddingMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, BidEndBiddingMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, BidEndBiddingMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.endBidding(msg, fee, memo, funds), options);
}
export interface BidStartBiddingMutation {
  client: BidClient;
  msg: {
    config: BiddingPeriod;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useBidStartBiddingMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, BidStartBiddingMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, BidStartBiddingMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.startBidding(msg, fee, memo, funds), options);
}