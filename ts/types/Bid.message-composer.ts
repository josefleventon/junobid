/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, InstantiateMsg, ExecuteMsg, Timestamp, Uint64, Uint128, BiddingPeriod, QueryMsg, BidResponse, Bid, BiddingPeriodResponse, BidsResponse } from "./Bid.types";
export interface BidMessage {
  contractAddress: string;
  sender: string;
  startBidding: ({
    config
  }: {
    config: BiddingPeriod;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  endBidding: ({
    acceptedBids,
    withdrawalAddress
  }: {
    acceptedBids: Addr[];
    withdrawalAddress?: Addr;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  bid: ({
    address
  }: {
    address?: Addr;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class BidMessageComposer implements BidMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.startBidding = this.startBidding.bind(this);
    this.endBidding = this.endBidding.bind(this);
    this.bid = this.bid.bind(this);
  }

  startBidding = ({
    config
  }: {
    config: BiddingPeriod;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          start_bidding: {
            config
          }
        })),
        funds
      })
    };
  };
  endBidding = ({
    acceptedBids,
    withdrawalAddress
  }: {
    acceptedBids: Addr[];
    withdrawalAddress?: Addr;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          end_bidding: {
            accepted_bids: acceptedBids,
            withdrawal_address: withdrawalAddress
          }
        })),
        funds
      })
    };
  };
  bid = ({
    address
  }: {
    address?: Addr;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          bid: {
            address
          }
        })),
        funds
      })
    };
  };
}